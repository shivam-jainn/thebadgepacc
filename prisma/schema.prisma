datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  username       String?   @unique
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  isOrganisation Boolean  @default(false)
  bio            String?
  onelink        String?
  social         Socials?     
  badges Badge[]
  tokens Tokens[]

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Badge {
  id               String   @id @default(cuid())
  name             String
  pic              String
  description      String
  no_of_issued     Int
  time_of_creation DateTime
  creator          User     @relation(fields: [creatorId], references: [id])
  creatorId        String
  tokens           Tokens[]
}

model Tokens {
  id            String   @id @default(cuid())
  issuance_time DateTime
  issuance_id   String    
  user          User     @relation(fields: [user_id], references: [id])
  user_id       String
  badge         Badge   @relation(fields: [badge_id], references: [id])
  badge_id      String
}

model Socials {
  id      String  @id @default(cuid())
  user    User?    @relation(fields: [userId], references: [id])
  userId  String? @unique

  cruhell String?
  gitlab  String?
  github  String?
  discord String?
}
